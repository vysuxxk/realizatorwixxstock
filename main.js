const { Client, Intents } = require('discord.js-selfbot-v13');
const { MessageEmbed } = require('discord.js-selfbot-v13');
const express = require('express');
const app = express();
const PORT = 8080;
const Discord = require('discord.js-selfbot-v13');
// Konfiguracja klienta Discord
const client = new Client({
  checkUpdate: false,
});

// Serwer HTTP do utrzymania aktywno≈õci na Render (dla darmowego tieru)
app.get('/', (req, res) => {
  res.send('Self-bot dzia≈Ça na Render! üöÄ');
});

app.listen(PORT, () => {
  console.log(`Serwer pingujƒÖcy dzia≈Ça na porcie ${PORT}`);
});

// Obs≈Çuga zdarze≈Ñ Discorda
client.once('ready', () => {
  console.log(`Zalogowano jako ${client.user.tag}!`);
});

// Reklama serwera
const serverAd = `
# üéâ Witamy na serwerze FSQQLI ST0CK! üéâ

Cieszymy siƒô, ≈ºe do nas do≈ÇƒÖczy≈Çe≈õ/a≈õ! üí•
Tutaj znajdziesz wszystko, czego potrzebujesz w ≈õwiecie cyfrowym ‚Äî szybko, tanio i bezpiecznie.

üõí Co u nas kupisz?
üéÆ Konta do najpopularniejszych gier:
‚Ä¢ Fortnite, Valorant, Supercell, Steam, Minecraft
üéß Serwisy premium:
‚Ä¢ Spotify, Netflix, Discord, Facebook i inne!
üí∏ Waluty do gier:
‚Ä¢ Robuxy, V-Dolce i inne gamingowe skarby!

üí¨ Masz pytania? Napisz do administracji ‚Äî jeste≈õmy tu, ≈ºeby pom√≥c!
üì¢ Obserwuj og≈Çoszenia, bierz udzia≈Ç w promocjach i nie przegap ≈ºadnej okazji!

üîê Z nami zyskujesz jako≈õƒá, zaufanie i najlepsze ceny na rynku!

Do≈ÇƒÖcz do naszej spo≈Çeczno≈õci i rozkrƒôƒá sw√≥j cyfrowy ≈õwiat! üöÄ

discord.gg/a77uMbSBmD

## RESTOCK WSZYSTKIEGO NA 20 OS√ìB
`;

// Lista u≈ºytkownik√≥w partnerstwa i ich czas ostatniego partnerstwa
const partneringUsers = new Map();
const partnershipTimestamps = new Map();

client.once('ready', () => {
  console.log(`Bot ${client.user.tag} jest gotowy.`);
  // Wysy≈Çanie wiadomo≈õci co 6 minut
  const channelId_partnerstwa = '1346609247869337701';
  const serverId = '1348273862365941780';
  setInterval(async () => {
    const channel = client.channels.cache.get(channelId_partnerstwa);
    if (channel) {
      await channel.send('# PARTNERSTWA PV - Shop Discord');
    } else {
      console.error(`Nie znaleziono kana≈Çu o ID ${channelId_partnerstwa}`);
    }
  }, 5.5 * 60 * 1000); // 6 minut w milisekundach

  // reklamowanie serwera
  const channelId_programming = '1346609275761332325';
  const channelId_global = '1348329636056268911';
  const zimoweall = '1346609268375158834';
  const zimowethematic = '1346609280291442708';
  const zimowetech = '1346609282174685264';
  const zimowe6h = '1346609312042324060';
  setInterval(async () => {
    const channel = client.channels.cache.get(channelId_programming);
    const channel_global = client.channels.cache.get(channelId_global);
    const zimoweall1 = client.channels.cache.get(zimoweall);
    const zimowethematic1 = client.channels.cache.get(zimowethematic);
    const zimowetech1 = client.channels.cache.get(zimowetech);
    const zimowe6h1 = client.channels.cache.get(zimowe6h);
    if (channel) {
      await channel.send(serverAd);
      await channel_global.send(serverAd);
      await zimoweall1.send(serverAd);
      await zimowethematic1.send(serverAd);
      await zimowetech1.send(serverAd);
    } else {
      console.error(`Nie znaleziono kana≈Çu o ID ${channelId_programming}`);
    }
  }, 11 * 60 * 1000); // 11 minut w milisekundach
});




client.on('messageCreate', async (message) => {
  // Sprawdzenie, czy wiadomo≈õƒá pochodzi od innego u≈ºytkownika
  if (!message.guild && !message.author.bot && message.author.id !== client.user.id) {
    const now = Date.now();
    const lastPartnership = partnershipTimestamps.get(message.author.id);

    if (lastPartnership && now - lastPartnership < 7 * 24 * 60 * 60 * 1000) {
      // Je≈õli u≈ºytkownik chce nawiƒÖzaƒá partnerstwo wcze≈õniej ni≈º tydzie≈Ñ, wy≈õlij wiadomo≈õƒá
      await message.channel.send("‚è≥ Musisz jeszcze poczekaƒá, zanim bƒôdziesz m√≥g≈Ç nawiƒÖzaƒá kolejne partnerstwo. Spr√≥buj ponownie za tydzie≈Ñ.");
      return;
    }

    if (!partneringUsers.has(message.author.id)) {
      partneringUsers.set(message.author.id, null);
      await message.channel.send("üåé Je≈õli chcesz nawiƒÖzaƒá partnerstwo, wy≈õlij swojƒÖ reklamƒô (maksymalnie 1 serwer).");
    } else {
      const userAd = partneringUsers.get(message.author.id);

      if (userAd === null) {
        partneringUsers.set(message.author.id, message.content);
        await message.channel.send(`‚úÖ Wstaw naszƒÖ reklamƒô:\n${serverAd}`);
        await message.channel.send("‚è∞ Daj znaƒá, gdy wstawisz reklamƒô!");
      } else if (message.content.toLowerCase().includes('wstawi') || message.content.toLowerCase().includes('ju≈º') || message.content.toLowerCase().includes('gotowe') || message.content.toLowerCase().includes('juz')) {
        // Dodajemy pytanie o do≈ÇƒÖczenie na serwer
        await message.channel.send("Czy wymagane jest do≈ÇƒÖczenie na tw√≥j serwer?");
        const filter = m => m.author.id === message.author.id;
        const reply = await message.channel.awaitMessages({ filter, max: 1, time: 60000, errors: ['time'] }).catch(() => null);

        if (reply && !reply.first().content.toLowerCase().includes('nie')) {
          await message.channel.send("M√≥j w≈Ça≈õciciel @xxvysuxx za nied≈Çugo na pewno do≈ÇƒÖczy do twojego serwera");
          const notificationUser = await client.users.fetch('855152045749174283');
          await notificationUser.send(`Wymagane do≈ÇƒÖczenie na serwer:\n${userAd}`);
        }

        const guild = client.guilds.cache.get('1382977764818419762');
        if (!guild) {
          await message.channel.send("‚ùï Nie znaleziono serwera.");
          return;
        }

        const member = await guild.members.fetch(message.author.id).catch(() => null);
        if (!member) {
          await message.channel.send("‚ùï Do≈ÇƒÖcz na serwer, aby kontynuowaƒá!");
          return;
        }

        const channel = guild.channels.cache.find(ch => ch.name === '„Äåüíº„Äçwsp√≥≈Çprace' && ch.isText());
        if (!channel) {
          await message.channel.send("Nie znaleziono kana≈Çu '„Äåüíº„Äçwsp√≥≈Çprace'.");
          return;
        }

        const displayName = member ? member.displayName : message.author.username;
        await channel.send(`${userAd}\n\nPartnerstwo z: ${member}`);
        await message.channel.send("‚úÖ Dziƒôkujemy za partnerstwo! W razie jakichkolwiek pyta≈Ñ prosimy o kontakt z u≈ºytkownikiem xxvysuxx");

        partnershipTimestamps.set(message.author.id, now);
        partneringUsers.delete(message.author.id);
      }
    }
  }
});

// Obs≈Çuga zdarze≈Ñ, kiedy u≈ºytkownik do≈ÇƒÖcza na serwer
client.on('guildMemberAdd', async (member) => {
  // Sprawd≈∫, czy u≈ºytkownik znajduje siƒô w mapie partneringUsers
  if (partneringUsers.has(member.id)) {
    // Wy≈õlij wiadomo≈õƒá powitalnƒÖ lub dalsze instrukcje do u≈ºytkownika
    const userAd = partneringUsers.get(member.id);
    const channel = member.guild.channels.cache.find(ch => ch.name === '„Äåüíº„Äçwsp√≥≈Çprace' && ch.isText());
    if (channel) {
      const displayName = member.displayName;
      await channel.send(`${userAd}\n\nPartnerstwo z: ${member}`);
      const dmChannel = await member.createDM();
      await dmChannel.send("‚úÖ Dziƒôkujemy za do≈ÇƒÖczenie! Twoja reklama zosta≈Ça wstawiona.");
      // Usu≈Ñ u≈ºytkownika z mapy partneringUsers
      partneringUsers.delete(member.id);
      // Zaktualizuj czas ostatniego partnerstwa
      const now = Date.now();
      partnershipTimestamps.set(member.id, now);
    } else {
      console.error("Nie znaleziono kana≈Çu 'üíº„Éªpartnerstwa'.");
    }
  }
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', (error) => {
  console.error('B≈ÇƒÖd Discorda:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Nieobs≈Çu≈ºony b≈ÇƒÖd:', error);
});

// Logowanie do Discorda
client.login(process.env.DISCORD_TOKEN);
